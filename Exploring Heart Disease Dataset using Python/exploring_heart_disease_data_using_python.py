# -*- coding: utf-8 -*-
"""Exploring Heart Disease Data using Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nlsiphYzT1ZLq-TgbS4ty9_WNS3UO0GK
"""
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

"""Download the dataset 

Link to dataset : https://www.kaggle.com/datasets/johnsmith88/heart-disease-dataset
"""

# Import the data into colab 
from google.colab import files
uploaded = files.upload()

# Loading the dataset
data = pd.read_csv("heart.csv")

data.head(5)

data.shape # Checking for the shape of data, that is (rows,columns)

data.size # total number of instances - rows by columns

data.info()

# data.describe()
data.describe().T # transpose of the describe method

"""## Checking the missing values

"""

data.isnull()

data.isnull().sum()

data.isnull().any() # Returns a boolean response

data.target.value_counts()

"""The "target" feild or column refers to the presence of heart disease in the patient. It is integer valued, with 0 = no disease and 1 = disease."""

# Check for duplicates
data[data.duplicated()==True]

# Drop duplicates
data.drop_duplicates(inplace=True)

data[data.duplicated()==True]

fig, ax = plt.subplots(1,2)

age = data['age'].values
sex = data['sex'].values

sns.distplot(age,ax=ax[0],color='green')
ax[0].set_title('Distribution of Age')
ax[0].set_xlim([min(age),max(age)])

sns.distplot(sex,ax=ax[1],color='purple')
ax[1].set_title('Distribution of Sex')
ax[1].set_xlim([min(sex),max(sex)])

plt.show()

data.shape

data.target.value_counts()

data = data.sample(frac=1) # for the fraction,1 means 10% and so on

non_hd_data = data.loc[data['target']==0]
hd_data = data.loc[data['target']==1][:138]

b_data = pd.concat([non_hd_data,hd_data])

b_data = b_data.sample(frac=1, random_state=5)

b_data.head()



X = b_data.iloc[:,:-1]
y = b_data.iloc[:,-1]

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,y,test_size=0.2,random_state=20)

from sklearn.preprocessing import StandardScaler

sc =  StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

from sklearn.ensemble import RandomForestClassifier

model = RandomForestClassifier(n_estimators = 100, max_depth=5)
model.fit(X_train,Y_train)

from sklearn.metrics import accuracy_score

Y_pred = model.predict(X_test)
accuracy = accuracy_score(Y_test,Y_pred)
accuracy
